{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "basePath": "/fabric",
    "paths": {
        "/AssetApp/Addassert": {
            "post": {
                "tags": [
                    "AssetApp"
                ],
                "description": "Invoke chaincode on peers",
                "operationId": "AssetController.Addassert",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for chaincode Description",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AssetApp.AssertArgs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} txId"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/AssetApp/Adduser": {
            "post": {
                "tags": [
                    "AssetApp"
                ],
                "description": "Invoke chaincode on peers",
                "operationId": "AssetController.Adduser",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for chaincode Description",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AssetApp.UserArgs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} txId"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/AssetApp/Deleteassert": {
            "put": {
                "tags": [
                    "AssetApp"
                ],
                "description": "delete the assert",
                "operationId": "AssetController.Delete",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for update content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AssetApp.DeleteArgs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} txId"
                    },
                    "403": {
                        "description": ":assertid is empty"
                    }
                }
            }
        },
        "/AssetApp/Queryassert/{id}": {
            "get": {
                "tags": [
                    "AssetApp"
                ],
                "description": "get assert by id",
                "operationId": "AssetController.Queryassert",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{object}Assertinfo"
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            }
        },
        "/AssetApp/Querybyowner/{owner}": {
            "get": {
                "tags": [
                    "AssetApp"
                ],
                "description": "get assert by owner",
                "operationId": "AssetController.Queryassertbyowner",
                "parameters": [
                    {
                        "in": "path",
                        "name": "owner",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} assertlist"
                    },
                    "403": {
                        "description": ":owner is empty"
                    }
                }
            }
        },
        "/AssetApp/Updateassert": {
            "put": {
                "tags": [
                    "AssetApp"
                ],
                "description": "update the assert, we can update \"name\", \"owner\", \"price\"",
                "operationId": "AssetController.Update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for update content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AssetApp.UpdateArgs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} txId"
                    },
                    "403": {
                        "description": ":assertid is empty"
                    }
                }
            }
        },
        "/AssetApp/gethistoryforassert/{id}": {
            "get": {
                "tags": [
                    "AssetApp"
                ],
                "description": "get history for assert",
                "operationId": "AssetController.Gethistoryforassert",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} asserthistory"
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            }
        },
        "/user/": {
            "post": {
                "tags": [
                    "user"
                ],
                "description": "create users",
                "operationId": "UserController.CreateUser",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} user.User.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Logs user into the system",
                "operationId": "UserController.Login",
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "description": "The username for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "password",
                        "description": "The password for login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} login success"
                    },
                    "403": {
                        "description": "user not exist"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Logs out current logged in user session",
                "operationId": "UserController.logout",
                "responses": {
                    "200": {
                        "description": "{string} logout success"
                    }
                }
            }
        },
        "/user/{name}": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get user by name",
                "operationId": "UserController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "403": {
                        "description": ":name is empty"
                    }
                }
            }
        },
        "/user/{uid}": {
            "put": {
                "tags": [
                    "user"
                ],
                "description": "update the user",
                "operationId": "UserController.Update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "403": {
                        "description": ":uid is not int"
                    }
                }
            }
        }
    },
    "definitions": {
        "AssetApp.AssertArgs": {
            "title": "AssertArgs",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "AssetApp.DeleteArgs": {
            "title": "DeleteArgs",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "ueserid": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "AssetApp.UpdateArgs": {
            "title": "UpdateArgs",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "ueserid": {
                    "type": "string"
                },
                "updatecontent": {
                    "type": "string"
                },
                "updatetag": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "AssetApp.UserArgs": {
            "title": "UserArgs",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "user.User": {
            "title": "User",
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "mail": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "passwd": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "type": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        }
    },
    "tags": [
        {
            "name": "user",
            "description": "Operations about Users\n"
        },
        {
            "name": "AssetApp",
            "description": "Operations about Invoke\n"
        }
    ]
}